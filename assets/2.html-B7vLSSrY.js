import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as p,b as n,d,w as i,f as a}from"./app-BofQRgQ0.js";const l={},r=a(`<h2 id="逃逸字符" tabindex="-1"><a class="header-anchor" href="#逃逸字符"><span><strong>逃逸字符</strong></span></a></h2><table><thead><tr><th>字符</th><th>意义</th><th>字符</th><th>意义</th></tr></thead><tbody><tr><td><code>\\b</code></td><td>回退一格</td><td><code>\\&quot;</code></td><td>双引号</td></tr><tr><td><code>\\t</code></td><td>到下一个表格位</td><td><code>\\&#39;</code></td><td>单引号</td></tr><tr><td><code>\\n</code></td><td>换行</td><td><code>\\\\</code></td><td>反斜杠本身</td></tr><tr><td><code>\\r</code></td><td>回车</td><td></td><td></td></tr></tbody></table><p><strong>制表位（八个字符）</strong>：</p><ul><li>每行的固定位置</li><li>用一个 <code>\\t</code>使得输出从下一个制表位开始</li><li>用 <code>\\t</code>才能使得上下两行对齐</li></ul><h2 id="string-args命令行参数" tabindex="-1"><a class="header-anchor" href="#string-args命令行参数"><span><strong><code>String[] args</code>命令行参数</strong></span></a></h2><p>Java程序的入口是 <code>main</code>方法，而 <code>main</code>方法可以接收一个命令行参数，是一个 <code>String[]</code>数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：利用 <code>-version</code>打印程序版本号</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>
             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;-version&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;v 1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该程序必须在 <code>cmd</code>中使用命令行运行，编译：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ javac Main.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，执行的时候，给它传递一个 <code>-version</code>参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> Main <span class="token parameter variable">-version</span>
<span class="token function">v</span> <span class="token number">1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包裹类型" tabindex="-1"><a class="header-anchor" href="#包裹类型"><span><strong>包裹类型</strong></span></a></h2><p>每种基础类型都有对应的包裹类型</p><table><thead><tr><th>基础类型</th><th>包裹类型</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>Boolean</code></td></tr><tr><td><code>char</code></td><td><code>Character</code></td></tr><tr><td><code>int</code></td><td><code>Integer</code></td></tr><tr><td><code>double</code></td><td><code>Double</code></td></tr><tr><td><code>byte</code></td><td><code>Byte</code></td></tr></tbody></table>`,16),u=a(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//使用基础类型定义变量  </span>
        <span class="token class-name">Integer</span> k <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">//使用包裹类型定义对象  </span>
        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//包裹类型的对象可以使用对应的基础类型变量进行赋值  </span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>好处：可以更方便的使用函数</p></div>`,2);function k(v,m){const s=e("RouteLink");return o(),c("div",null,[r,p("p",null,[n("可以将一个基础类型的数据转换为"),d(s,{to:"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.html"},{default:i(()=>[n("对象")]),_:1}),n("的形式，使它们一样可以参与运算与传递")]),u])}const b=t(l,[["render",k],["__file","2.html.vue"]]),y=JSON.parse(`{"path":"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.html","title":"Java基本语法","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"Java基本语法","date":"2024-03-08T00:00:00.000Z","category":["面向对象"],"tag":["学习笔记"],"description":"逃逸字符 制表位（八个字符）： 每行的固定位置 用一个 \\\\t使得输出从下一个制表位开始 用 \\\\t才能使得上下两行对齐 String[] args命令行参数 Java程序的入口是 main方法，而 main方法可以接收一个命令行参数，是一个 String[]数组 例：利用 -version打印程序版本号 该程序必须在 cmd中使用命令行运行，编译： 然后...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2.html"}],["meta",{"property":"og:site_name","content":"岁杪二四"}],["meta",{"property":"og:title","content":"Java基本语法"}],["meta",{"property":"og:description","content":"逃逸字符 制表位（八个字符）： 每行的固定位置 用一个 \\\\t使得输出从下一个制表位开始 用 \\\\t才能使得上下两行对齐 String[] args命令行参数 Java程序的入口是 main方法，而 main方法可以接收一个命令行参数，是一个 String[]数组 例：利用 -version打印程序版本号 该程序必须在 cmd中使用命令行运行，编译： 然后..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"岁杪二四"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2024-03-08T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基本语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-08T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"岁杪二四\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"逃逸字符","slug":"逃逸字符","link":"#逃逸字符","children":[]},{"level":2,"title":"String[] args命令行参数","slug":"string-args命令行参数","link":"#string-args命令行参数","children":[]},{"level":2,"title":"包裹类型","slug":"包裹类型","link":"#包裹类型","children":[]}],"git":{},"readingTime":{"minutes":1.33,"words":400},"filePathRelative":"zh/posts/Java面向对象/2.md","localizedDate":"2024年3月8日","excerpt":"<h2><strong>逃逸字符</strong></h2>\\n<table>\\n<thead>\\n<tr>\\n<th>字符</th>\\n<th>意义</th>\\n<th>字符</th>\\n<th>意义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>\\\\b</code></td>\\n<td>回退一格</td>\\n<td><code>\\\\\\"</code></td>\\n<td>双引号</td>\\n</tr>\\n<tr>\\n<td><code>\\\\t</code></td>\\n<td>到下一个表格位</td>\\n<td><code>\\\\'</code></td>\\n<td>单引号</td>\\n</tr>\\n<tr>\\n<td><code>\\\\n</code></td>\\n<td>换行</td>\\n<td><code>\\\\\\\\</code></td>\\n<td>反斜杠本身</td>\\n</tr>\\n<tr>\\n<td><code>\\\\r</code></td>\\n<td>回车</td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{b as comp,y as data};
