import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-CfHiactp.js";const t={},p=e(`<p>有一种类是被定义在某一个类中的（类中类）称为<strong>内部类</strong></p><h2 id="inner-class" tabindex="-1"><a class="header-anchor" href="#inner-class"><span><strong>Inner Class</strong></span></a></h2><p>如果一个类定义在某一个类的内部，这个类就是 <code>Inner Class</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
        <span class="token comment">//这里定义了一个内部类</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里 <code>Outer</code>是一个普通类，而 <code>Inner</code>是一个内部类，<code>Inner Class</code>的实例（对象）不能单独存在，必须依附于一个 <code>Outer</code>类的实例存在</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token string">&quot;Nested&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化一个Outer</span>
        <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例化一个Inner</span>
        inner<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述代码，要实例化一个 <code>Inner</code>，必须首先创建一个 <code>Outer</code>的实例，然后，调用 <code>Outer</code>实例的 <code>new</code>来创建 <code>Inner</code>实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="匿名内部类-anonymous-class" tabindex="-1"><a class="header-anchor" href="#匿名内部类-anonymous-class"><span><strong>匿名内部类 Anonymous Class</strong></span></a></h2><p>匿名内部类是一种没有名字的内部类，它可以直接在声明和实例化时定义。匿名内部类通常用于简化代码，特别是在实现接口或继承类时 匿名内部类的语法结构如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写方法或实现接口方法</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一完整使用匿名内部类实现接口([[抽象类和接口#接口]])的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token string">&quot;Nested&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建了一个外部类的实例，并使用构造函数传入name参数</span>
        outer<span class="token punctuation">.</span><span class="token function">asyncHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用outer类中使用匿名内部类实现的asyncHello方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">asyncHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//匿名内部类</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//这里覆写实现Runnable接口中的run抽象方法</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//启动新线程</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>在 <code>Main()</code>中 <code>outer.asyncHello()</code>的这里调用的是 <code>Outer</code>类的实例方法 <code>asyncHello()</code>，而不是直接调用匿名内部类的方法</strong></p></div><p><code>asyncHello()</code>内部的内容：</p><ul><li>在 <code>asyncHello()</code>方法内部，创建了一个匿名内部类，这个类实现了 <code>Runnable</code>接口，并重写了其 <code>run</code>方法。</li><li><code>Runnable r = new Runnable() { ... }</code>：这里定义了一个匿名内部类并将其实例化，赋值给变量 <code>r</code>。</li><li><code>Outer.this.name</code>：在匿名内部类中，通过 <code>Outer.this.name</code> 访问外部类 <code>Outer</code> 的实例变量 <code>name</code>。</li></ul><p>可以理解为匿名内部类把（将接口转为类、再将类实例化为对象）两个步骤直接简化，在将接口实例化的时候，因为接口已经实现了好了，并直接赋值给某变量，也就跳过了变成类的步骤，没有类名</p><p>因此匿名内部类存在<strong>局限</strong>：</p><ol><li><strong>不能有构造函数</strong>：匿名内部类不能定义构造函数，因为它们没有类名。</li><li><strong>不能被重用</strong>：匿名内部类只能在声明时使用，不能在其他地方实例化。</li></ol>`,19),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","8.html.vue"]]),k=JSON.parse('{"path":"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8.html","title":"内部类","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"内部类","date":"2024-06-06T00:00:00.000Z","category":["面向对象"],"tag":["学习笔记"],"description":"有一种类是被定义在某一个类中的（类中类）称为内部类 Inner Class 如果一个类定义在某一个类的内部，这个类就是 Inner Class 在这里 Outer是一个普通类，而 Inner是一个内部类，Inner Class的实例（对象）不能单独存在，必须依附于一个 Outer类的实例存在 观察上述代码，要实例化一个 Inner，必须首先创建一个 O...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/8.html"}],["meta",{"property":"og:site_name","content":"岁杪二四"}],["meta",{"property":"og:title","content":"内部类"}],["meta",{"property":"og:description","content":"有一种类是被定义在某一个类中的（类中类）称为内部类 Inner Class 如果一个类定义在某一个类的内部，这个类就是 Inner Class 在这里 Outer是一个普通类，而 Inner是一个内部类，Inner Class的实例（对象）不能单独存在，必须依附于一个 Outer类的实例存在 观察上述代码，要实例化一个 Inner，必须首先创建一个 O..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"岁杪二四"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2024-06-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内部类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"岁杪二四\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Inner Class","slug":"inner-class","link":"#inner-class","children":[]},{"level":2,"title":"匿名内部类 Anonymous Class","slug":"匿名内部类-anonymous-class","link":"#匿名内部类-anonymous-class","children":[]}],"git":{},"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"zh/posts/Java面向对象/8.md","localizedDate":"2024年6月6日","excerpt":"<p>有一种类是被定义在某一个类中的（类中类）称为<strong>内部类</strong></p>\\n<h2><strong>Inner Class</strong></h2>\\n<p>如果一个类定义在某一个类的内部，这个类就是 <code>Inner Class</code></p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Outer</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Inner</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//这里定义了一个内部类</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
