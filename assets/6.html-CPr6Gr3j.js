import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as t}from"./app-CfHiactp.js";const e={},p=t(`<h2 id="多态变量" tabindex="-1"><a class="header-anchor" href="#多态变量"><span><strong>多态变量</strong></span></a></h2><p>Java的对象变量是多态的，它们能保存不止一种类型的对象，它们可以保存的是声明类型的对象，或声明类型的子类的对象例：当父类为 <code>item</code>，子类为 <code>CD</code>和 <code>DVD</code>时</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     item a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     item b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//向上造型</span>
     item c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DVD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个Java的对象变量，都具有两个类型：一个是声明类型，一个是动态类型。有时候两者是一致的，有时候又不一样这就是<strong>变量的多态</strong>（在运行过程中，它所管理的对象类型是会变化的）</p><h2 id="造型-cast" tabindex="-1"><a class="header-anchor" href="#造型-cast"><span><strong>造型(cast)</strong></span></a></h2><p>造型：把一个类型的<strong>对象</strong>，赋给另一个类型的<strong>变量</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对象的赋值并不是将一个对象赋值给另一个对象（在C++中可以），而是让这两个对象的管理者去管理同一个对象</p></div><p>当给一个对象变量管理着与它声明（静态）类型不符的对象时，就发生了造型</p><h3 id="向上造型" tabindex="-1"><a class="header-anchor" href="#向上造型"><span>向上造型</span></a></h3><p>当把子类的对象赋给父类的变量的时候，就发生了<strong>向上造型</strong> 向上造型是默认的，不需要运算符 向上造型总是安全的</p><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span><strong>多态</strong></span></a></h2><p><strong>多态</strong>指的是不同对象在调用同一个方法时表现出的多种不同行为。它允许不同的对象因为参数的不同对同一消息进行不同的响应。例如：要实现一个动物叫的方法，由于每种动物的叫声是不同的，因此可以在方法中接收一个动物类型的参数，当传入的参数不同时，实现不同动物的叫声。</p><h3 id="函数调用的绑定" tabindex="-1"><a class="header-anchor" href="#函数调用的绑定"><span>函数调用的绑定</span></a></h3><p>当通过对象变量调用函数的时候，调用哪个函数这个事情叫做<strong>绑定</strong>，分为两种：</p><ul><li>静态绑定：根据对象的声明类型来决定</li><li>动态绑定：根据对象的动态类型来决定</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token operator">:</span> listItem<span class="token punctuation">)</span><span class="token punctuation">{</span>
        item<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在遍历 <code>listItem</code>时，我们无法知道遍历到的对象到底属于什么类型，但程序会自动调用对应类型的对应方法，这属于动态绑定。</p><hr><p>Java中多态主要有以下两种形式：</p><ul><li>方法的重载</li><li>对象的多态性（方法重写）</li></ul>`,20),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","6.html.vue"]]),k=JSON.parse('{"path":"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6.html","title":"多态","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"多态","date":"2024-05-14T00:00:00.000Z","category":["面向对象"],"tag":["学习笔记"],"description":"多态变量 Java的对象变量是多态的，它们能保存不止一种类型的对象，它们可以保存的是声明类型的对象，或声明类型的子类的对象例：当父类为 item，子类为 CD和 DVD时 每一个Java的对象变量，都具有两个类型：一个是声明类型，一个是动态类型。有时候两者是一致的，有时候又不一样这就是变量的多态（在运行过程中，它所管理的对象类型是会变化的） 造型(ca...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6.html"}],["meta",{"property":"og:site_name","content":"岁杪二四"}],["meta",{"property":"og:title","content":"多态"}],["meta",{"property":"og:description","content":"多态变量 Java的对象变量是多态的，它们能保存不止一种类型的对象，它们可以保存的是声明类型的对象，或声明类型的子类的对象例：当父类为 item，子类为 CD和 DVD时 每一个Java的对象变量，都具有两个类型：一个是声明类型，一个是动态类型。有时候两者是一致的，有时候又不一样这就是变量的多态（在运行过程中，它所管理的对象类型是会变化的） 造型(ca..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"岁杪二四"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2024-05-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多态\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"岁杪二四\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"多态变量","slug":"多态变量","link":"#多态变量","children":[]},{"level":2,"title":"造型(cast)","slug":"造型-cast","link":"#造型-cast","children":[{"level":3,"title":"向上造型","slug":"向上造型","link":"#向上造型","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"函数调用的绑定","slug":"函数调用的绑定","link":"#函数调用的绑定","children":[]}]}],"git":{},"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"zh/posts/Java面向对象/6.md","localizedDate":"2024年5月14日","excerpt":"<h2><strong>多态变量</strong></h2>\\n<p>Java的对象变量是多态的，它们能保存不止一种类型的对象，它们可以保存的是声明类型的对象，或声明类型的子类的对象例：当父类为 <code>item</code>，子类为 <code>CD</code>和 <code>DVD</code>时</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> args<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n     item a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">item</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n     item b <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CD</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//向上造型</span>\\n     item c <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">DVD</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
