import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-CfHiactp.js";const e={},p=t(`<h2 id="gui事件处理机制" tabindex="-1"><a class="header-anchor" href="#gui事件处理机制"><span><strong>GUI事件处理机制</strong></span></a></h2><p>定义：当在某个组件上发生某些操作的时候，会自动触发某一段代码的执行 在GUI事件处理机制中涉及到四个重要的概念：</p><ul><li><p><strong>事件源（Event Source）</strong>：事件发生的场所，通常是产生事件的组件，如窗口、按钮、菜单等</p></li><li><p><strong>事件对象（Event）</strong>：在事件源上发生的操作可以称为事件，GUI会把事件都封装到一个事件对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取</p></li><li><p><strong>监听器（Listener）</strong>：当在某个事件源上发生了事件，事件监听器就可以对事件进行处理</p></li><li><p><strong>注册监听</strong>：把某个事件监听器（A）通过某个事件（B）绑定到某个事件源（C）上，当在事件源（C）上发生了某个事件（B）后，那么事件监听器（A）的代码就会自动执行</p><p>以下以一个鼠标单击事件为例：</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">JPanel</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">//创建事件源： </span>
        <span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">&quot;按钮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//为事件源注册监听器：</span>
        <span class="token class-name">MyActionListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token comment">//自定义事件监听器：</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyActionListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">{</span>  
        <span class="token annotation punctuation">@Override</span>  
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;按钮被点击了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这段代码，不难发现Swing事件处理的主要步骤如下：</p><ol><li><strong>创建事件源</strong>：在这里我们创建了一个按钮（当然除了一些常见的按钮、键盘等组件作为事件源外，还可以使用JFrame窗口在内的顶级容器作为事件源）</li><li><strong>自定义事件监听器</strong>：这里我们使用 <code>MyActionListener</code>实现了 <code>ActionListener</code>作为鼠标单击事件的动作监听器。因为 <code>ActionListener</code>是一个接口，所以采用了内部类([[内部类]])的定义方法对接口进行实现（接口必须被继承实现其中所有的抽象方法才能被使用）。<strong>监听器是一个特殊的Java类，必须实现 <code>XxxListener</code>接口</strong></li><li><strong>为事件源注册监听器</strong>：使用 <code>addXxxListener()</code>方法为指定事件源添加特定类型监听器。上述代码中我们使用的两行代码可简化为：<code>button.addActionListener(new MyActionListener())</code></li></ol><h2 id="代码简化" tabindex="-1"><a class="header-anchor" href="#代码简化"><span><strong>代码简化</strong></span></a></h2><p>在Java Swing中自定义事件监听器存在三种写法：内部类、匿名内部类、Lambda表达式 内部类写法同上</p><h3 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类"><span><strong>匿名内部类</strong></span></a></h3><p>匿名内部类([[内部类#匿名内部类 Anonymous Class]])的好处是使得代码更加简化，不需要为每个简单的接口实现创建单独的类文件。匿名内部类直接在需要的地方定义和使用。上述代码可改写为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;按钮被点击了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span><strong>Lambda表达式</strong></span></a></h3><p>Lambda表达式是Java 8引入的一种新特性，用于简洁地表示能够作为参数传递的匿名函数。它使得代码更加简洁、易读，同时在处理集合和流时提供了强大的支持。Lambda表达式可以看作是对匿名内部类的一种简化。 Lambda表达式的基本语法格式如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> expression
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> statements<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法详解</strong></p><ol><li><strong>参数列表</strong>： <ul><li>位于箭头符号 <code>-&gt;</code> 的左边，可以是一个或多个参数。</li><li>如果没有参数，可以写成 <code>()</code>。</li><li>如果有一个参数，并且没有显式指定参数类型，则可以省略括号。</li></ul></li><li><strong>箭头符号</strong>： <ul><li>使用 <code>-&gt;</code> 将参数列表和方法体分隔开。</li></ul></li><li><strong>方法体</strong>： <ul><li>位于箭头符号 <code>-&gt;</code> 的右边，可以是一个表达式或一段代码块。</li><li>如果是单个表达式，不需要花括号 <code>{}</code>。</li><li>如果是多行代码，需要用花括号 <code>{}</code> 包裹，并可以包含返回语句。</li></ul></li></ol><p>因此，上述匿名内部类对自定义事件监听器的写法可以进一步简写为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;按钮被点击了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2.html.vue"]]),k=JSON.parse('{"path":"/zh/posts/JavaSwing/2.html","title":"事件处理机制","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"事件处理机制","date":"2024-06-06T00:00:00.000Z","category":["Java GUI"],"tag":["学习笔记"],"description":"GUI事件处理机制 定义：当在某个组件上发生某些操作的时候，会自动触发某一段代码的执行 在GUI事件处理机制中涉及到四个重要的概念： 事件源（Event Source）：事件发生的场所，通常是产生事件的组件，如窗口、按钮、菜单等 事件对象（Event）：在事件源上发生的操作可以称为事件，GUI会把事件都封装到一个事件对象中，如果需要知道该事件的详细信息...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/JavaSwing/2.html"}],["meta",{"property":"og:site_name","content":"岁杪二四"}],["meta",{"property":"og:title","content":"事件处理机制"}],["meta",{"property":"og:description","content":"GUI事件处理机制 定义：当在某个组件上发生某些操作的时候，会自动触发某一段代码的执行 在GUI事件处理机制中涉及到四个重要的概念： 事件源（Event Source）：事件发生的场所，通常是产生事件的组件，如窗口、按钮、菜单等 事件对象（Event）：在事件源上发生的操作可以称为事件，GUI会把事件都封装到一个事件对象中，如果需要知道该事件的详细信息..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"岁杪二四"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2024-06-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件处理机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"岁杪二四\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"GUI事件处理机制","slug":"gui事件处理机制","link":"#gui事件处理机制","children":[]},{"level":2,"title":"代码简化","slug":"代码简化","link":"#代码简化","children":[{"level":3,"title":"匿名内部类","slug":"匿名内部类","link":"#匿名内部类","children":[]},{"level":3,"title":"Lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]}]}],"git":{},"readingTime":{"minutes":3.44,"words":1033},"filePathRelative":"zh/posts/JavaSwing/2.md","localizedDate":"2024年6月6日","excerpt":"<h2><strong>GUI事件处理机制</strong></h2>\\n<p>定义：当在某个组件上发生某些操作的时候，会自动触发某一段代码的执行\\n在GUI事件处理机制中涉及到四个重要的概念：</p>\\n<ul>\\n<li>\\n<p><strong>事件源（Event Source）</strong>：事件发生的场所，通常是产生事件的组件，如窗口、按钮、菜单等</p>\\n</li>\\n<li>\\n<p><strong>事件对象（Event）</strong>：在事件源上发生的操作可以称为事件，GUI会把事件都封装到一个事件对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取</p>\\n</li>\\n<li>\\n<p><strong>监听器（Listener）</strong>：当在某个事件源上发生了事件，事件监听器就可以对事件进行处理</p>\\n</li>\\n<li>\\n<p><strong>注册监听</strong>：把某个事件监听器（A）通过某个事件（B）绑定到某个事件源（C）上，当在事件源（C）上发生了某个事件（B）后，那么事件监听器（A）的代码就会自动执行</p>\\n<p>以下以一个鼠标单击事件为例：</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,k as data};
