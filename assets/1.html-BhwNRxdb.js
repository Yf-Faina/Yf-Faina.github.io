import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as o,a as n,b as s,d as c,w as i,f as a}from"./app-DTxoc4BU.js";const u={},r=n("p",null,[n("strong",null,"对象"),s("是实体，需要被创建 "),n("code",null,"new"),s("，可以为我们做事情。"),n("strong",null,"对象 = 属性 + 服务")],-1),d=n("ul",null,[n("li",null,"表达东西或者事件"),n("li",null,"运行时响应消息（提供服务）")],-1),k=n("p",null,[n("mark",null,[s("把数据和对数据的操作放在一起"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"→")]),n("annotation",{encoding:"application/x-tex"},"\\rightarrow")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3669em"}}),n("span",{class:"mrel"},"→")])])]),n("strong",null,"封装")])],-1),m=a(`<p><strong>类</strong>是规范，根据类的定义来创建对象</p><ul><li>定义所有对象的属性</li></ul><p>OOP特性：</p><ol><li>一切都是对象</li><li>程序就是一堆互相发送消息的对象</li><li>每个对象都有自己的存储空间，里面时其他的对象</li><li>每个对象都有一个类型</li><li>所有属于某个特定类型的对象可以提供相同的服务</li></ol><h2 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类"><span><strong>定义类</strong></span></a></h2><p>以自动售货机为例子，创建一个自定义类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>  <span class="token comment">//商品的价格</span>
    <span class="token keyword">int</span> balance<span class="token punctuation">;</span>  <span class="token comment">//余额</span>
    <span class="token keyword">int</span> total<span class="token punctuation">;</span>    <span class="token comment">//收到的所有钱</span>
  
    <span class="token keyword">void</span> <span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//显示提示</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">void</span> <span class="token function">insertMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//往售货机中放钱</span>
        balance <span class="token operator">=</span> balance <span class="token operator">+</span> amount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">void</span> <span class="token function">showBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//显示余额</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">void</span> <span class="token function">getFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//得到食物</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> price<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Here you are.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            balance <span class="token operator">-=</span> price<span class="token punctuation">;</span>
            total <span class="token operator">+=</span> price<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">VendingMachine</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">showPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">showBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">insertMoneyj</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">getFood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span><span class="token function">showBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建对象：<strong>对象变量</strong>是<em>对象的管理者而不是所有者</em></p><p>使用点运算符 <code>.</code>可以让对象做事</p><h3 id="成员变量" tabindex="-1"><a class="header-anchor" href="#成员变量"><span><strong>成员变量</strong></span></a></h3><ul><li>类定义了对象中所具有的变量，这些变量称作成员变量</li><li>每个对象有自己的变量，和同一个类的其它对象是分开的</li></ul><h3 id="函数与成员变量" tabindex="-1"><a class="header-anchor" href="#函数与成员变量"><span><strong>函数与成员变量</strong></span></a></h3><ul><li>在函数中可以直接写成员变量的名字来访问成员变量</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Java中，类中的成员函数被称为（类）方法。</p></div><ul><li><p>函数是通过对象来调用的</p><p><code>v.insertMoney()</code></p><p>这次调用临时建立了 <code>insertMoney()</code>和 <code>v</code>之间的关系，<code>insertMoney()</code>内部的成员变量指的是 <code>v</code>的成员变量</p></li></ul><h3 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字"><span><strong>this关键字</strong></span></a></h3><p><code>this</code>是成员函数的一个特殊的固有的本地变量，它表达了调用这个函数的那个对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> balance<span class="token punctuation">;</span>  
    <span class="token keyword">int</span> total<span class="token punctuation">;</span>  
  
    <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this.price</code>指的是成员对象所对应的 <code>price</code>，而 <code>price</code>指的是 <code>setPrice(int price)</code>函数中的 <code>price</code>参数</p><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span><strong>调用函数</strong></span></a></h3><ul><li>通过点运算符 <code>.</code>调用某个对象的函数</li><li>在成员函数内部直接调用自己（<code>this</code>）的其他成员函数</li></ul><h3 id="本地变量" tabindex="-1"><a class="header-anchor" href="#本地变量"><span><strong>本地变量</strong></span></a></h3><ul><li>定义在方法体内部的变量是本地变量，也成为局部变量，这些变量只有在方法被调用的时候才会分配空间，当方法结束，这些变量就会被释放。</li><li>与本地变量相对的是成员变量（字段或属性），它们被定义在类中而不是方法中，成员变量的生存周期与对象的生存周期相同，它们将在对象被销毁时释放内存。成员变量的作用域是类内部的成员函数（方法）。</li><li>本地变量的生存期和作用域都是函数内部。</li></ul><h2 id="对象初始化" tabindex="-1"><a class="header-anchor" href="#对象初始化"><span><strong>对象初始化</strong></span></a></h2><h3 id="成员变量定义初始化" tabindex="-1"><a class="header-anchor" href="#成员变量定义初始化"><span><strong>成员变量定义初始化</strong></span></a></h3>`,25),v=n("ul",null,[n("li",null,[s("变量成员在定义的地方就可以给出初始值，没有给出初始值的成员变量在对象创建的时候会自动获得"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("值")])],-1),h=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,[s("对象变量的"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("值表示没有管理任何对象，也可以主动给 "),n("code",null,"null"),s("值")])],-1),b=a(`<ul><li>定义初始化可以调用函数，也可以使用已经定义的成员变量</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> total<span class="token punctuation">;</span>  
  
    vendingMachine<span class="token punctuation">{</span>   <span class="token comment">//构造函数</span>
        total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//使用f()函数为balance进行初始化</span>
        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span><strong>构造函数</strong></span></a></h3>`,3),g=n("p",null,[s("如果有一个成员函数的名字和类的名字完全相同，则在创建这个类的每一个对象的时候会自动调用这个函数"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"→")]),n("annotation",{encoding:"application/x-tex"},"\\rightarrow")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.3669em"}}),n("span",{class:"mrel"},"→")])])]),n("strong",null,"构造函数")],-1),w=a(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>这个函数不能有返回类型</p></div><h3 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载"><span><strong>函数重载</strong></span></a></h3><ul><li>一个类可以有多个构造函数，只要它们的参数表不同</li><li>创建对象的时候给出不同的参数值，就会自动调用不同的构造函数</li><li>通过 <code>this()</code>还可以调用其他构造函数</li><li><mark>一个类里的同名但参数表不同的函数构成重载关系</mark></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> price <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> balance<span class="token punctuation">;</span>  
    <span class="token keyword">int</span> total<span class="token punctuation">;</span>  
  
    <span class="token function">vendingMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//这两个名字但是参数表不同的函数构成重载关系</span>
    <span class="token function">vendingMachine</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">VendingMachine</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在创建vm时使用vendingMachine()</span>
        vendingMachine vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">vendingMachine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在创建vm1时使用vendingMachine(int price)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问属性" tabindex="-1"><a class="header-anchor" href="#访问属性"><span><strong>访问属性</strong></span></a></h3><p><strong><code>private</code>私有</strong></p><ul><li>只有这个类内部可以访问</li><li>类内部指类的成员函数和定义初始化</li><li>这个限制是对类的而不是对对象的</li></ul><p><strong><code>public</code>公共</strong></p><ul><li>任何人都可以访问</li><li>任何人指的是在任何类的函数或定义初始化中可以使用</li><li>使用指的是调用、访问或定义变量</li></ul>`,9),y={class:"hint-container important"},x=n("p",{class:"hint-container-title"},"重要",-1),_=n("code",null,"public",-1),f=n("code",null,".java",-1),M=n("code",null,".java",-1),j=n("strong",null,"编译单元",-1),E=n("code",null,"public",-1);function B(V,A){const t=p("RouteLink");return l(),o("div",null,[r,d,k,m,v,h,b,g,w,n("div",y,[x,n("p",null,[_,s("修饰的类，必须定义在与自己同名的单独 "),f,s("文件中，否则只能被在同一个"),c(t,{to:"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3.html"},{default:i(()=>[s("包")]),_:1}),s("中的代码访问。该 "),M,s("文件称为一个"),j,s("，在一个编译单元中，可以存在多个类，但只有一个类可以用 "),E,s("修饰")])])])}const L=e(u,[["render",B],["__file","1.html.vue"]]),N=JSON.parse('{"path":"/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.html","title":"对象和类","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","title":"对象和类","date":"2024-03-03T00:00:00.000Z","category":["面向对象"],"tag":["学习笔记"],"description":"对象是实体，需要被创建 new，可以为我们做事情。对象 = 属性 + 服务 表达东西或者事件 运行时响应消息（提供服务） 把数据和对数据的操作放在一起→封装 类是规范，根据类的定义来创建对象 定义所有对象的属性 OOP特性： 一切都是对象 程序就是一堆互相发送消息的对象 每个对象都有自己的存储空间，里面时其他的对象 每个对象都有一个类型 所有属于某个特...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1.html"}],["meta",{"property":"og:site_name","content":"岁杪二四"}],["meta",{"property":"og:title","content":"对象和类"}],["meta",{"property":"og:description","content":"对象是实体，需要被创建 new，可以为我们做事情。对象 = 属性 + 服务 表达东西或者事件 运行时响应消息（提供服务） 把数据和对数据的操作放在一起→封装 类是规范，根据类的定义来创建对象 定义所有对象的属性 OOP特性： 一切都是对象 程序就是一堆互相发送消息的对象 每个对象都有自己的存储空间，里面时其他的对象 每个对象都有一个类型 所有属于某个特..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"岁杪二四"}],["meta",{"property":"article:tag","content":"学习笔记"}],["meta",{"property":"article:published_time","content":"2024-03-03T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"对象和类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-03T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"岁杪二四\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"定义类","slug":"定义类","link":"#定义类","children":[{"level":3,"title":"成员变量","slug":"成员变量","link":"#成员变量","children":[]},{"level":3,"title":"函数与成员变量","slug":"函数与成员变量","link":"#函数与成员变量","children":[]},{"level":3,"title":"this关键字","slug":"this关键字","link":"#this关键字","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":3,"title":"本地变量","slug":"本地变量","link":"#本地变量","children":[]}]},{"level":2,"title":"对象初始化","slug":"对象初始化","link":"#对象初始化","children":[{"level":3,"title":"成员变量定义初始化","slug":"成员变量定义初始化","link":"#成员变量定义初始化","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"函数重载","slug":"函数重载","link":"#函数重载","children":[]},{"level":3,"title":"访问属性","slug":"访问属性","link":"#访问属性","children":[]}]}],"git":{},"readingTime":{"minutes":4.44,"words":1333},"filePathRelative":"zh/posts/Java面向对象/1.md","localizedDate":"2024年3月3日","excerpt":"<p><strong>对象</strong>是实体，需要被创建 <code>new</code>，可以为我们做事情。<strong>对象 = 属性 + 服务</strong></p>\\n<ul>\\n<li>表达东西或者事件</li>\\n<li>运行时响应消息（提供服务）</li>\\n</ul>\\n<p><mark>把数据和对数据的操作放在一起<span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\\"application/x-tex\\">\\\\rightarrow</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.3669em;\\"></span><span class=\\"mrel\\">→</span></span></span></span><strong>封装</strong></mark></p>","autoDesc":true}');export{L as comp,N as data};
